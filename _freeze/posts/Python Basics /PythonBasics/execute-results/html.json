{
  "hash": "c3f28847f9f21b314733001fc072c861",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Python Basics \"\nauthor: \"Jake Starkey\"\ndate: \"2024-02-18\"\ncategories: [ code, data-analysis]\nimage: \"Unknown.jpeg\"\nexecute: \n  warning: false\n  message: false\neditor: \n  markdown: \n    wrap: sentence\n---\n\n\n## Variables Are Names, Not Places\n\n*A value is datum (literal) such as a number or text\n\n*There are different types of values:\n\n*352.3 is known as a float or double;\n\n*22 is an integer;\n\n*\"Hello World!\" is a string.\n\n::: {#f3019022 .cell execution_count=1}\n``` {.python .cell-code}\nlist_example =  [10, 1.23, \"like this\", True, None]\nprint(list_example)\ntype(list_example)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[10, 1.23, 'like this', True, None]\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nlist\n```\n:::\n:::\n\n\n\\[10, 1.23, 'like this', True, None\\]\n\n*The most.\nbasic built-in data types that we'll need to know about are: integers, 10 floats, 1.23 strings, \"like this\" booleans, True nothing, None\n\n*Python also has a built-in type of data container called a list (ex. \\[10,15,20\\]) that can contain anything, even different types\n\n##Values, Variables, and Types\n\n::: {#8ae7aaf6 .cell execution_count=2}\n``` {.python .cell-code}\na = 10\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\n```\n:::\n:::\n\n\n*A variable is a name that refers to a value.\n\n**We can think of a variable as a box that has a value, or multiple values, packed inside it A variable is just a name!\n\n*Sometimes you will hear variables referred to as objects.\n\n*Everything that is not a literal value, such as 10, is an object\n\n##Assignment (=)\n\n::: {#4b531b39 .cell execution_count=3}\n``` {.python .cell-code}\n# Here we assign the integer value 5 to the variable x.\nx = 5   \n\n# Now we can use the variable x in the next line.\ny = x + 12  \ny\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n17\n```\n:::\n:::\n\n\n*In Python, we use = to assign a value to a variable \n\n*In math, = means equality of both sides \n\n*In programs, = means assignment: assign the value on the right side to the variable on the left side.\n\n*In programming code, everything on the right side needs to have a value.\n\n*The right side can be a literal value, or a variable that has already been assigned a value, or a combination.\n\n*When Python reads y= x + 12, it does the following: Sees the = in the middle.Knows that this is an assignment.\n\n*Calculates the right side (gets the value of the object referred to by x and adds it to 12).\n\n*Assigns the result to the left-side variable, y.\n\n##Code and Comment Style\n\n*The two main principles for coding and managing data are:\n**Make things easier for your future self.\n**Don't trust your future self.\n\n*The # mark is Google Colab's comment character \n**The # character has many names: hash, sharp, pound, or octothorpe.\n**The \\# indicates that the rest of the line is to be ignored.\n**Write comments before the line that you want the comment to apply to.\n\n*Consider adding more comments on code cells and their results using text cells.\n\n##Brackets \n*There are several kinds of brackets in Python, including \\[\\], {}, and ().\n\n::: {#254a2051 .cell execution_count=4}\n``` {.python .cell-code}\nvector = ['a', 'b']\nvector[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n'a'\n```\n:::\n:::\n\n\n*[] is used to denote a list or to signify accessing a position using an index\n\n::: {#f31065e4 .cell execution_count=5}\n``` {.python .cell-code}\n{'a', 'b'}  # set\n{'first_letter': 'a', 'second_letter': 'b'}  # dictionary\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n{'first_letter': 'a', 'second_letter': 'b'}\n```\n:::\n:::\n\n\n{'first_letter': 'a', 'second_letter': 'b'}\n{} is used to denote a set or a dictionary (with key-value pairs)\n\n\n*() is used to denote\n**a tuple, or\n**the arguments to a function, ex. function(x) where x is the input passed to the function\n##Q1\n\n::: {#c344978d .cell execution_count=6}\n``` {.python .cell-code}\n(2**5/(7*(4-2**3)))\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n-1.1428571428571428\n```\n:::\n:::\n\n\n##Q2\n\n::: {#4998b124 .cell execution_count=7}\n``` {.python .cell-code}\n20 == '20'\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nFalse\n```\n:::\n:::\n\n\n*This is saying 20 is not equal to ‘20’ because they are different data types (int vs string)\n\n::: {#c1c19838 .cell execution_count=8}\n``` {.python .cell-code}\nx = 4.0\ny = .5\nz = 3*y - x\n\nx < y or 3*y < x\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nTrue\n```\n:::\n:::\n\n\nTrue\n  *This says the expression is true since 3*.5 < 4\n  \n##Q3\n\n::: {#9e32194f .cell execution_count=9}\n``` {.python .cell-code}\nfare = \"$10.00\"\ntip = \"2.00$\"\ntax = \"$ 0.80\"\n```\n:::\n\n\nWrite a Python code that uses slicing and the print() function to print out the following message:\n\nThe total trip cost is: $12.80\n\n::: {#3217a855 .cell execution_count=10}\n``` {.python .cell-code}\ntotal =fare = \"$10.00\"\ntip = \"2.00$\"\ntax = \"$ 0.80\"\ntotal = fare[0:2] + tip[0] + tax[3:6]\nprint(\"The total trip cost is:\", total)\n\n#The total trip cost is: $12.80The total trip cost is:\", total)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe total trip cost is: $12.80\n```\n:::\n:::\n\n\n##Q4\n\n::: {#9aa78f2b .cell execution_count=11}\n``` {.python .cell-code}\nlist_variable = [100, 144, 169, 1000, 8]\n```\n:::\n\n\nWrite a Python code that uses print() and max() functions to print out the largest value in the list, list_variable, as follows:\n\nThe largest value in the list is: 1000\n\n::: {#bf2248a1 .cell execution_count=12}\n``` {.python .cell-code}\nlist_variable = [100,144,169,1000,8]\nx =max(list_variable)\nprint('The largest value in the list is:',x)\n\n#The largest value in the list is: 1000\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe largest value in the list is: 1000\n```\n:::\n:::\n\n\nThe largest value in the list is: 1000\n##Q5\n*Import the pandas library as pd.\n*Install the itables package.\n*From itables, import the function init_notebook_mode and show.\n\n::: {#77804c7d .cell execution_count=13}\n``` {.python .cell-code}\nimport pandas as pd\n!pip install itables\nfrom itables import init_notebook_mode\nfrom itables import show\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRequirement already satisfied: itables in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (1.6.3)\r\nRequirement already satisfied: IPython in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from itables) (8.15.0)\r\nRequirement already satisfied: pandas in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from itables) (2.0.3)\r\nRequirement already satisfied: numpy in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from itables) (1.24.3)\r\nRequirement already satisfied: backcall in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from IPython->itables) (0.2.0)\r\nRequirement already satisfied: decorator in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from IPython->itables) (5.1.1)\r\nRequirement already satisfied: jedi>=0.16 in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from IPython->itables) (0.18.1)\r\nRequirement already satisfied: matplotlib-inline in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from IPython->itables) (0.1.6)\r\nRequirement already satisfied: pickleshare in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from IPython->itables) (0.7.5)\r\nRequirement already satisfied: prompt-toolkit!=3.0.37,<3.1.0,>=3.0.30 in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from IPython->itables) (3.0.36)\r\nRequirement already satisfied: pygments>=2.4.0 in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from IPython->itables) (2.15.1)\r\nRequirement already satisfied: stack-data in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from IPython->itables) (0.2.0)\r\nRequirement already satisfied: traitlets>=5 in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from IPython->itables) (5.7.1)\r\nRequirement already satisfied: pexpect>4.3 in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from IPython->itables) (4.8.0)\r\nRequirement already satisfied: appnope in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from IPython->itables) (0.1.2)\r\nRequirement already satisfied: python-dateutil>=2.8.2 in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from pandas->itables) (2.8.2)\r\nRequirement already satisfied: pytz>=2020.1 in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from pandas->itables) (2023.3.post1)\r\nRequirement already satisfied: tzdata>=2022.1 in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from pandas->itables) (2023.3)\r\nRequirement already satisfied: parso<0.9.0,>=0.8.0 in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from jedi>=0.16->IPython->itables) (0.8.3)\r\nRequirement already satisfied: ptyprocess>=0.5 in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from pexpect>4.3->IPython->itables) (0.7.0)\r\nRequirement already satisfied: wcwidth in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from prompt-toolkit!=3.0.37,<3.1.0,>=3.0.30->IPython->itables) (0.2.5)\r\nRequirement already satisfied: six>=1.5 in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from python-dateutil>=2.8.2->pandas->itables) (1.16.0)\r\nRequirement already satisfied: executing in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from stack-data->IPython->itables) (0.8.3)\r\nRequirement already satisfied: asttokens in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from stack-data->IPython->itables) (2.0.5)\r\nRequirement already satisfied: pure-eval in /Users/jakestarkey/anaconda3/lib/python3.11/site-packages (from stack-data->IPython->itables) (0.2.2)\r\n```\n:::\n:::\n\n\n",
    "supporting": [
      "PythonBasics_files"
    ],
    "filters": [],
    "includes": {}
  }
}